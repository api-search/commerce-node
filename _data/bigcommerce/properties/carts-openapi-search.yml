openapi: 3.0.3
info:
  title: Carts
  version: ''
tags:
  - name: Carts (Single)
  - name: Items
  - name: Redirects
  - name: Settings
  - name: Metafields
  - name: Batch metafields
paths:
  /carts:
    parameters:
      - null
    post:
      description: >-
        This API endpoint generates a **Cart** with the following required
        fields:


        - `line_item`: Specifies a line item.

        - `custom_items`: Specifies a custom item. Only required if adding a
        custom item to the cart.

        - `gift_certificates`: Specifies a gift certificate. Only required if
        adding a gift certificate to the cart.


        Key points to note:


        - A unique **cart** `id` (UUID) will be provided in the response.

        - The **cart** `id` is synonymous with a **checkout** `id`.

        - You can create a cart by adding an existing **catalog item** or a
        **custom item**.

        - Carts remain valid for **30 days** from the last modification,
        including creation or editing.

        - When a product has modifiers, describe the modifier selection(s) using
        the `option_selections` array.

        - The data type and format of a cart's `option_value` are determined by
        the `value_data` object of a product's [variant option
        value](/docs/rest-catalog/product-variant-options/values), [modifier
        value](/docs/rest-catalog/product-modifiers/values), or a combination of
        both.

        - Redirect URLs can only be generated for carts created using the **REST
        Management API**. 

        - Append `include=redirect_urls` to the request URL to receive cart
        `redirect_urls` in the response, pointing to either a shared checkout
        domain or a channel-specific domain based on the storefront
        configuration.

        - To restore a cart created by a shopper or through the Storefront API,
        recreate the cart using the **REST Management API**.

        - To view cart `promotions` in the response, add
        `include=promotions.banners` as a query parameter to the request URL.
      tags:
        - Carts
      summary: Create a Cart
  /carts/{cartId}/items:
    parameters:
      - null
      - null
      - null
    post:
      description: >-
        Adds line item to the *Cart*.


        **Usage Notes**


        To add a custom item use `custom_items`. 


        Overriding a product’s `list_price` will make that item ineligible for
        V3 product level promotions.


        If a product has modifiers, omit the `variant_id` and instead use the
        `option_selections` array to describe both the **variant** and the
        **modifier** selections.


        Please note that this API endpoint is not concurrent safe, meaning
        multiple simultaneous requests could result in unexpected and
        inconsistent results.
      tags:
        - Carts
        - Items
        - Line
      summary: Add Cart Line Items
  /carts/{cartId}/redirect_urls:
    parameters:
      - null
      - null
      - null
    post:
      description: >-
        Creates a **Cart** redirect URL for redirecting a shopper to an already
        created cart using the `cartId`.


        **Usage Notes**


        * Redirect URLs can also be created with **Create a Cart** requests by
        appending `include=redirect_urls`.

        * A **Carts** redirect URL may only be used once.

        * Redirect URLs point to either a shared checkout domain or a
        channel-specific domain, depending on the storefront configuration.

        * Once a redirect URL has been visited, it will be invalidated and
        cannot be used again. 

        * If your application requires URLs to be visited more than once,
        consider generating a fresh one each time you need to restore a cart,
        and redirecting to the URL from your own application.

        * Redirect URLs can be generated only from carts that were created using
        the **REST Management API**. 

        * To restore a cart that was created on the storefront, either by a
        shopper or a Storefront API, first recreate the cart using the **REST
        Management API**.

        * When redirecting the shopper, you can add a set of `query_params` to
        the URL. The `query_params` feature allows passing additional
        information to the redirect URL.
      tags:
        - Carts
        - Redirects
        - URL
      summary: Create Cart Redirect URL
  /carts/{cartId}/items/{itemId}:
    parameters:
      - null
      - null
      - null
    put:
      description: >-
        Updates an existing, single line item in the *Cart*. 


        **Notes**


        Currently, only updating `list_price` and `quantity` are supported.
        Updating a product’s `list_price` will make that item ineligible for V3
        product-level promotions. 


        If the product has modifiers, omit the `variant_id` and instead use the
        `option_selections` array to describe both the **variant** and the
        **modifier** selections.


        If a variant needs to be changed or updated, the product will need to be
        removed and re-added to the cart with the correct variants using the
        **Add Cart Line Items** endpoint.


        `custom_items` cannot be updated via the API at this time. To update
        your cart, add a new updated custom item and delete the outdated one. If
        your cart contains only one line item, perform the add operation before
        the delete operation.


        Deleting all line items from the cart will invalidate the cart. 


        Please note that this API endpoint is not concurrent safe, meaning
        multiple simultaneous requests could result in unexpected and
        inconsistent results.
      tags:
        - Carts
        - Items
        - Line
      summary: Update Cart Line Item
    delete:
      description: |-
        Deletes a *Cart* line item. 

        **Notes**

        Removing the last `line_item` in the *Cart* deletes the *Cart*.
      tags:
        - Carts
        - Items
        - Line
      summary: 'Delete Cart Line Item '
  /carts/{cartId}:
    parameters:
      - null
      - null
    get:
      description: Returns a storeʼs *Cart*.
      tags:
        - Carts
      summary: Get a Cart
    put:
      description: >-
        Updates a *Cartʼs* `customer_id`.


        **Notes**


        Changing the *Cart* `customer_id` will remove any promotions or shipping
        calculations on the *Cart*. These are tied to the customer depending on
        cart conditions and any customer groups. 
      tags:
        - Carts
        - Customers
      summary: Update Customer ID
    delete:
      description: Deletes a *Cart*. Once a *Cart* has been deleted it can’t be recovered.
      tags:
        - Carts
      summary: Delete a Cart
  /carts/settings:
    parameters:
      - null
    get:
      summary: Get Global Cart Settings
      description: Returns the global cart settings of a store.
      tags:
        - Carts
        - Global
        - Settings
    put:
      summary: Update Global Cart Settings
      description: Update the global cart settings of a store.
      tags:
        - Carts
        - Global
        - Settings
  /carts/settings/channels/{channel_id}:
    parameters:
      - null
      - null
    get:
      summary: Get Channel Cart Settings
      description: Returns the per-channel overrides for the cart settings of a store.
      tags:
        - Carts
        - Channels
        - Settings
    put:
      summary: 'Update Channel Cart Settings '
      description: Update the per-channel overrides for the cart settings of a store.
      tags:
        - Carts
        - Channels
        - Settings
  /carts/{cart_id}/metafields:
    parameters:
      - null
      - null
    get:
      summary: Get Cart Metafields
      tags:
        - Carts
        - Metafields
      description: Get a cart's metafields.
    post:
      summary: Create a Cart Metafield
      tags:
        - Carts
        - Metafields
      description: >
        Create a cart `Metafield`. 


        If you create an order from a Cart, you can continue referencing the
        Cart Metafields even if you delete the original Cart. Use the `cart_id`
        field on the Order to construct the Cart Metafield endpoint. 
  /carts/{cart_id}/metafields/{metafield_id}:
    get:
      summary: Get a Cart Metafield
      tags:
        - Carts
        - Metafields
      description: Gets a cart metafield.
    put:
      summary: Update a Cart Metafield
      tags:
        - Carts
        - Metafields
      description: |
        Update a `Metafield`, by `cart_id`.
    delete:
      summary: Delete a Metafield
      tags:
        - Carts
        - Metafields
      description: |
        Deletes a `Metafield`.
    parameters:
      - null
      - null
      - null
  /carts/metafields:
    get:
      summary: Get All Cart Metafields
      tags:
        - Carts
        - Metafields
      description: Get all cart metafields.
    post:
      summary: Create multiple Metafields
      tags:
        - Carts
        - Metafields
        - Multiple
      description: Create multiple metafields.
    put:
      summary: Update multiple Metafields
      tags:
        - Carts
        - Metafields
        - Multiple
      description: Create multiple metafields.
    delete:
      summary: Delete All Metafields
      tags:
        - Carts
        - Metafields
      description: Delete all cart
